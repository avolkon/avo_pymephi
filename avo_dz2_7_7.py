def triangle_type(a, b, c):
    # Проверка условия существования треугольника
    if a + b <= c or a + c <= b or b + c <= a:
        return "Треугольник с такими сторонами построить невозможно"
    # Проверка типа треугольника
    if a == b == c:
        return "Треугольник равносторонний"
    elif a == b or b == c or a == c:
        return "Треугольник равнобедренный"
    else:
        return "Треугольник разносторонний"

MAX_ATTEMPTS = 5
step = 0

while step < MAX_ATTEMPTS:
    try:
        trian1 = int(input("Введите длину стороны 1: "))
        trian2 = int(input("Введите длину стороны 2: "))
        trian3 = int(input("Введите длину стороны 3: "))
        result = triangle_type(trian1, trian2, trian3)
        if result == "Треугольник с такими сторонами построить невозможно":
            print(result)
            attempts += 1
            print("Попробуйте ввести длины сторон заново.")
        else:
            print(result)
            break
    except ValueError:
        print("Ошибка ввода. Введите целые числа.")
        attempts += 1

if step == MAX_ATTEMPTS:
    print("Превышено максимальное количество попыток.")


# Напишите функцию triangle_type(trian1, trian2, trian3), которая:
# Проверяет, можно ли из трёх заданных длин сторон составить треугольник.
# Если треугольник возможен, определяет его тип: 
# Равносторонний — все три стороны равны.
# Равнобедренный — две стороны равны.
# Разносторонний — все стороны разные.
# Если построение треугольника невозможно — возвращает строку "Невозможно".
# Входные данные:
# - trian1: положительное число (int или float) - длина стороны треугольника
# - trian2: положительное число (int или float) - длина стороны треугольника
# - trian3: положительное число (int или float) - длина стороны треугольника
# Выходные данные:
# - str: "Невозможно", "Равносторонний", "Равнобедренный" или "Разносторонний"
# Примеры использования:
# - triangle_type(3, 4, 5) → "Разносторонний"
# - triangle_type(5, 5, 5) → "Равносторонний"
# - triangle_type(5, 5, 3) → "Равнобедренный"
# - triangle_type(1, 2, 3) → "Невозможно"
# - triangle_type(10, 1, 1) → "Невозможно"
# Исключения и особые случаи:
# - Если хотя бы одна сторона ≤ 0 — результат "Невозможно" (треугольник не существует)
# - Проверка возможности построения треугольника по неравенству треугольника:
#   - a + b > c, a + c > b, b + c > a
#   - если это не выполняется — вернуть "Невозможно"
# Ограничения:
# - Входные значения — положительные числа
# - Не использовать сторонние библиотеки
# - Сравнение выполняется строго: >, а не >=
# Требования к реализации:
# - Функция должна возвращать строку — не печатать (print()), а именно возвращать результат с помощью return
# - Запрещается использовать внешние библиотеки
